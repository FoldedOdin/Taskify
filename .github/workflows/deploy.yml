name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  # Deploy Frontend to Netlify
  deploy-frontend-netlify:
    name: Deploy Frontend (Netlify)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test:run

    - name: Build for production
      run: npm run build:prod
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_APP_NAME: Taskify
        VITE_ENVIRONMENT: production

    - name: Deploy to Netlify
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Deploy Frontend to Vercel (Alternative)
  deploy-frontend-vercel:
    name: Deploy Frontend (Vercel)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && false # Disabled by default
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build:prod
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_APP_NAME: Taskify
        VITE_ENVIRONMENT: production

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  # Deploy Backend to Render
  deploy-backend-render:
    name: Deploy Backend (Render)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
        MONGODB_URI: ${{ secrets.TEST_MONGODB_URI }}
        JWT_SECRET: test-jwt-secret

    - name: Run security checks
      run: npm run security:check

    - name: Trigger Render deployment
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"

  # Deploy Backend to Heroku (Alternative)
  deploy-backend-heroku:
    name: Deploy Backend (Heroku)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && false # Disabled by default
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: "server"
        procfile: "web: npm run start:prod"

  # Health check after deployment
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend-netlify, deploy-backend-render]
    if: always() && (needs.deploy-frontend-netlify.result == 'success' || needs.deploy-backend-render.result == 'success')
    
    steps:
    - name: Wait for deployment to be ready
      run: sleep 60

    - name: Check frontend health
      run: |
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1

    - name: Check backend health
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

    - name: Run basic API tests
      run: |
        # Test basic API endpoints
        curl -f ${{ secrets.BACKEND_URL }}/api/auth/health || exit 1

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-frontend-netlify, deploy-backend-render, health-check]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.health-check.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic here (Slack, Discord, email, etc.)