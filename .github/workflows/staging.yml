name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: |
        cd server
        npm ci

    - name: Run frontend tests
      run: npm run test:run

    - name: Run backend tests
      run: |
        cd server
        npm run test
      env:
        NODE_ENV: test
        MONGODB_URI: ${{ secrets.STAGING_MONGODB_URI }}
        JWT_SECRET: staging-jwt-secret

    - name: Build frontend for staging
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.STAGING_API_URL }}
        VITE_APP_NAME: Taskify (Staging)
        VITE_ENVIRONMENT: staging

    - name: Deploy frontend to Netlify (staging)
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=dist --alias=staging
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Deploy backend to staging
      run: |
        # Trigger staging deployment hook
        curl -X POST "${{ secrets.STAGING_DEPLOY_HOOK_URL }}"

    - name: Wait for deployment
      run: sleep 30

    - name: Run staging health checks
      run: |
        curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1
        curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1

    - name: Comment PR with staging URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Staging deployment ready!**
            
            - Frontend: ${{ secrets.STAGING_FRONTEND_URL }}
            - Backend: ${{ secrets.STAGING_API_URL }}
            
            Please test the changes before merging.`
          })

  # Run E2E tests on staging
  e2e-tests:
    name: E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install Playwright
      run: |
        npm install -D @playwright/test
        npx playwright install

    - name: Run E2E tests
      run: npx playwright test
      env:
        BASE_URL: ${{ secrets.STAGING_FRONTEND_URL }}
        API_URL: ${{ secrets.STAGING_API_URL }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7