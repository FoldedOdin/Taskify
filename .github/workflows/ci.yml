name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Check code formatting
      run: npm run format:check

    - name: Run tests
      run: npm run test:run

    - name: Run test coverage
      run: npm run test:coverage

    - name: Build application
      run: npm run build:prod
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3001' }}
        VITE_APP_NAME: Taskify
        VITE_ENVIRONMENT: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  # Backend CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm run security:audit

    - name: Run security checks
      run: npm run security:check:dev

    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/taskify-test
        JWT_SECRET: test-jwt-secret-for-ci-pipeline-only

    - name: Run test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/taskify-test
        JWT_SECRET: test-jwt-secret-for-ci-pipeline-only

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Check for known vulnerabilities (Frontend)
      run: |
        npm audit --audit-level high
        
    - name: Check for known vulnerabilities (Backend)
      run: |
        cd server
        npm audit --audit-level high

    - name: Check for outdated dependencies
      run: |
        npm outdated || true
        cd server
        npm outdated || true